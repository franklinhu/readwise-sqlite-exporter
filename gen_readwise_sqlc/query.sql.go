// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package gen_readwise_sqlc

import (
	"context"
	"time"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books (
	id, title, author, category, source, num_highlights, last_highlight_at,
	updated, cover_image_url, highlights_url, source_url
) VALUES (
	?, ?, ?, ?, ?, ?, ?,
	?, ?, ?, ?
)
RETURNING id, title, author, category, source, num_highlights, last_highlight_at, updated, cover_image_url, highlights_url, source_url
`

type CreateBookParams struct {
	ID              int64
	Title           string
	Author          string
	Category        string
	Source          string
	NumHighlights   int64
	LastHighlightAt time.Time
	Updated         time.Time
	CoverImageUrl   string
	HighlightsUrl   string
	SourceUrl       string
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.Category,
		arg.Source,
		arg.NumHighlights,
		arg.LastHighlightAt,
		arg.Updated,
		arg.CoverImageUrl,
		arg.HighlightsUrl,
		arg.SourceUrl,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Category,
		&i.Source,
		&i.NumHighlights,
		&i.LastHighlightAt,
		&i.Updated,
		&i.CoverImageUrl,
		&i.HighlightsUrl,
		&i.SourceUrl,
	)
	return i, err
}

const createHighlight = `-- name: CreateHighlight :one
INSERT INTO highlights (
  id, text, note, location, location_type, highlighted_at, book_id, url,
  color, updated, tags
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?,
  ?, ?, ?
)
RETURNING id, text, note, location, location_type, highlighted_at, book_id, url, color, updated, tags
`

type CreateHighlightParams struct {
	ID            int64
	Text          string
	Note          string
	Location      int64
	LocationType  string
	HighlightedAt time.Time
	BookID        int64
	Url           string
	Color         string
	Updated       time.Time
	Tags          string
}

func (q *Queries) CreateHighlight(ctx context.Context, arg CreateHighlightParams) (Highlight, error) {
	row := q.db.QueryRowContext(ctx, createHighlight,
		arg.ID,
		arg.Text,
		arg.Note,
		arg.Location,
		arg.LocationType,
		arg.HighlightedAt,
		arg.BookID,
		arg.Url,
		arg.Color,
		arg.Updated,
		arg.Tags,
	)
	var i Highlight
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Note,
		&i.Location,
		&i.LocationType,
		&i.HighlightedAt,
		&i.BookID,
		&i.Url,
		&i.Color,
		&i.Updated,
		&i.Tags,
	)
	return i, err
}

const getBook = `-- name: GetBook :one
SELECT id, title, author, category, source, num_highlights, last_highlight_at, updated, cover_image_url, highlights_url, source_url FROM books
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Category,
		&i.Source,
		&i.NumHighlights,
		&i.LastHighlightAt,
		&i.Updated,
		&i.CoverImageUrl,
		&i.HighlightsUrl,
		&i.SourceUrl,
	)
	return i, err
}

const getMostRecentlyUpdatedBook = `-- name: GetMostRecentlyUpdatedBook :one
SELECT id, title, author, category, source, num_highlights, last_highlight_at, updated, cover_image_url, highlights_url, source_url FROM books
ORDER BY updated DESC
LIMIT 1
`

func (q *Queries) GetMostRecentlyUpdatedBook(ctx context.Context) (Book, error) {
	row := q.db.QueryRowContext(ctx, getMostRecentlyUpdatedBook)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Category,
		&i.Source,
		&i.NumHighlights,
		&i.LastHighlightAt,
		&i.Updated,
		&i.CoverImageUrl,
		&i.HighlightsUrl,
		&i.SourceUrl,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
SELECT id, title, author, category, source, num_highlights, last_highlight_at, updated, cover_image_url, highlights_url, source_url FROM books
`

func (q *Queries) ListBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, listBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Category,
			&i.Source,
			&i.NumHighlights,
			&i.LastHighlightAt,
			&i.Updated,
			&i.CoverImageUrl,
			&i.HighlightsUrl,
			&i.SourceUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
